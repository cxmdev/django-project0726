Para extrair os requirements o comando eh pip freeze e para instalar pip install -r requirements.txt
'Para setar um local estatico para minhas imagens dentro da pagina de admin, devo adicionar (concatenar) na url do projeto o seguinte caminho: urlpatterns += static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT), acompanhado das alteracoes no arquivo settings.py 
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
Django shell eh um django interativo do proprio python, que serve para testar, iterar os codigos do app, que pode ser executado atraves do comando python .\manage.py shell
o comando ._meta.get_fields() pega todos os campos presentes no meu orm.
para salvar alteracoes no orm, deve-se semrpe lembrar de usar o comando save()
o filter retorna um queryset
Para criar usuarios atraves do shell devemos executar os seguintes comandos: from django.contrib.auth.models import User, User.objects.create_user(first_name='Maria', last_name='Helena', username='MariaHelena', email='mhelena@gmail.com', password='123456') 
sempre priorizar manter a logica no codigo python do que nos tempaltes
para rodar testes eh necessario instalar pip install pytest e pytest-django
para imprimir testes via linha de comando com mensagens no pytest o comando deve ser pytest -rP
No caso de querer os comentarios dos testes no vscode basta adicionar -rP no arquivo pytest.ini addopts
para usar o runner do unittest ao inves do pytest eh somente digitar python manage.py test
para executar o pytest com o runner pytest basta digitar pytest
functional tests sao os teste realizados na pratica, como se fosse um usuario (ex: abrir o nevegador hardmode)
Em testes, devemos ser super descritivos, mesmo que fique com um nome grande, para facilitar o debug
para seu runner de test, no caso o pytest ficar ouvindo as modificacoes do codigo, e necessario instalar o pytest-watch e executar o comando ptw.
para adicionar argumentos em ordem, devemos usar o args com uma tupla arg =(1,), para adicionar um dicionario, devemos usar kwargs com um dicionario kwargs={'id': 1}
== checa se o valor corresponde a outro valor, o IS checa a identidade, a referencia de memoria, se um objeto e um objeto mesmo com nomes diferentes
quando referenciamos o valor de uma variavel com uma outra variavel, a segunda variavel tera a mesma identidade da variavel 1
com a finalidade de organizar melhor os testes temos que criar um arquivo tests dentro do app e dentro deste arquivo simular um __init__.py vazio, e criar o nome das nossas classes de teste para cada teste, isso evita que tenhamos todas as classes dentro de um unico arquivo no tests.py que vem como default do python
o comando python manage.py test -v3 permite que vejamos a execucao do unitest default do django em modo mais verboso, quando v representa a quantidade de verbosidade da execucao.
o django tem uma funcao chamada self.client que trabalha com os dados inseridos no django, como get por exemplo que captura dados especificos desejados, self.client.get(views.algo)
para executar um teste individualmente no pytest o comando e pytest -k 'nome_do_teste', no unittest basta adicionar -k na frente. Para utilizar o pytest watch, o comando e ptw -- -k 'nomedoteste'
quando eu crio uma variavel e atribuo a ela a criacao de um model sem chamar o gerenciador objects, essa variavel nao tera um id e nao sera salva nos meus models, para que seja criada e salva, comos se tivesse sendo feito o save(), devo executar, por exemplo, o seguinte comando category = Category.objects.create(name='category')
os ... para ignorar a execucao de uma funcao ou classe chama elipses, tambem pode ser usado o pass
fixture eh um trecho de codigo que e digitado para dar suporte ao teste realizado.
code smelling significa que o codigo nao esta usando as melhores praticas
metodos teardown seriam meotodos a serem executados apos o teste ja os metodos setup sao metodos de configuracao, o metodo setup e executado antes de cada execaucao de teste
para pular um teste caso seja a estrategia, basta usar o @skip importando o modulo direto do unittest,ex: from unittest import skip, e acima da calsse a ser skipada, colocar o comando @skip('a mensagem a ser exibida'), o skip podera ser utilizado tanto na classe como no metodo
quando quisermos falhar um teste porposital, basta utilizar self.fail('mensagem a ser exibida')
WIP = WORK IN PROGRESS  
TDD = Test driven development, significa fazer o teste antes de desenvolver a aplicacao, eh considerada uma boa pratica, fazer o teste antes da view
"""""" sao docstrings, sao comentarios que aparecem nos testes por exemplo
quando e feita uma alteracao no meu model e eu dou o comando por ex: self.recipe.save() ele deveria seguir os parametros setados no meu model, porem, o django nao faz isso automaticamente por questoes de retrocompatibilidade, neste caso, antes de realizar o salvamento, devemos realizar o full clean, ex: self.recipe.full_clean() para que a validacao seja realizada
O coverage e responsavel por condensar todos os testes realizados na aplicacao e gerar um arquivo index que pode ser consultado para ver quanto por cento da aplicacao foi testada. atraves dos comandos: pip install coverage, coverage run -m pytest, coverage html, sera gerado um arquivo htmlcov na raiz ao qual podera ser acessado o arquivo html. o arquivo de configuracao do coverage deve ser gerado na raiz do projeto com o nome .coveragerc
Para ajustar o slug como unique para nao se repetir de forma automatizada, o seguinte comando em python manage.py shell, from recipes.models import Recipe,  r = Recipe.objects.get(id=2), for i in range(20): r.id = None; r.save(), 
Para corrigir o slug, pois duplicamos as receitas devemos executar o seguinte codigo em shell, from recipes.models import Recipe, recipes = Recipe.objects.all(), for index, recipe in enumerate(recipes): recipe.slug = f'{recipe.slug}-{index}'; recipe.save()
TDD = Test Driven Development - fazer primeiro o codigo do teste depois o da funcionalidade
TESTSENDED
No metodo TDD sao utilizadas as seguintes etapas: RED (ERRO), GREEN (PASS), REFACTOR (TESTE EM SI), estas etapas devem ser tratadas como ciclos que devem ser repassados conforme a implementacao dos testes, etapa a etapa.
lambda request: ... ignora um codigo que deveria ser executado com sucesso.
O django utiliza o principio da especificidade para carergar as minhas urls, entao quanto mais especifica for a minha url, mais acima das outras ela deve ser, porque o django adota padroes de leitura do codigo que pode influenciar na forma de execucao do codigo e leitura das urls.
O django utiliza o padrao MTV, ao contrario de outras linguagens que utilizam MVC (Model View Controller), model(interface entre codigo e base de dados), View (funcao ou classe que vai criar uma logica para descobrir quais dados ira utilizar e o que renderizar, qual template utilizar), Template (e a parte que o usuario ve, nao e recomendavel ter logica no template, basicamente somente html)
Quando eu quiser que meu template exiba html basta colocar pipe safe, |safe que ele exibira
No caso do python/django, existe o cross-site scripting (XSS) que impede que o dados recebidos de inputs cheguem como comandos/html nos meus inputs.
o .strip() remove os espacos laterais do meu codigo
Para realizar a busca de algo no banco de dados, ao inves de utilizar somente o = como no caso do codigo     recipes = Recipe.objects.filter(title=search_term), basta utilizarmos o __icontains que o django realizara a busca analisando se o texto contem e nao se e igual ao texto requerido. o i do icontains faz a busca ignorar letras maiusculas e minusculas.
Para realizar uma busca de dois atributos como OR e nao como AND, devemos importar o Q, atraves do comando from django.db.models import Q, envolver as duas variaveis que recebem os valores de forma que fique Q() | Q(), O Pipe deve ser utilizado para representar o OR. O operador padrao segue o seguinte padrao> title e descricao devem conter o que busco, quando eu preciso de title ou descricao contem X.
