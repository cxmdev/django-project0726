Para extrair os requirements o comando eh pip freeze e para instalar pip install -r requirements.txt
'Para setar um local estatico para minhas imagens dentro da pagina de admin, devo adicionar (concatenar) na url do projeto o seguinte caminho: urlpatterns += static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT), acompanhado das alteracoes no arquivo settings.py 
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
Django shell eh um django interativo do proprio python, que serve para testar, iterar os codigos do app, que pode ser executado atraves do comando python .\manage.py shell
o comando ._meta.get_fields() pega todos os campos presentes no meu orm.
para salvar alteracoes no orm, deve-se semrpe lembrar de usar o comando save()
o filter retorna um queryset
Para criar usuarios atraves do shell devemos executar os seguintes comandos: from django.contrib.auth.models import User, User.objects.create_user(first_name='Maria', last_name='Helena', username='MariaHelena', email='mhelena@gmail.com', password='123456') 
sempre priorizar manter a logica no codigo python do que nos tempaltes
para rodar testes eh necessario instalar pip install pytest e pytest-django
para imprimir testes via linha de comando com mensagens no pytest o comando deve ser pytest -rP
No caso de querer os comentarios dos testes no vscode basta adicionar -rP no arquivo pytest.ini addopts
para usar o runner do unittest ao inves do pytest eh somente digitar python manage.py test
para executar o pytest com o runner pytest basta digitar pytest
functional tests sao os teste realizados na pratica, como se fosse um usuario (ex: abrir o nevegador hardmode)
Em testes, devemos ser super descritivos, mesmo que fique com um nome grande, para facilitar o debug
para seu runner de test, no caso o pytest ficar ouvindo as modificacoes do codigo, e necessario instalar o pytest-watch e executar o comando ptw.
para adicionar argumentos em ordem, devemos usar o args com uma tupla arg =(1,), para adicionar um dicionario, devemos usar kwargs com um dicionario kwargs={'id': 1}
== checa se o valor corresponde a outro valor, o IS checa a identidade, a referencia de memoria, se um objeto e um objeto mesmo com nomes diferentes
quando referenciamos o valor de uma variavel com uma outra variavel, a segunda variavel tera a mesma identidade da variavel 1
com a finalidade de organizar melhor os testes temos que criar um arquivo tests dentro do app e dentro deste arquivo simular um __init__.py vazio, e criar o nome das nossas classes de teste para cada teste, isso evita que tenhamos todas as classes dentro de um unico arquivo no tests.py que vem como default do python
o comando python manage.py test -v3 permite que vejamos a execucao do unitest default do django em modo mais verboso, quando v representa a quantidade de verbosidade da execucao.
o django tem uma funcao chamada self.client que trabalha com os dados inseridos no django, como get por exemplo que captura dados especificos desejados, self.client.get(views.algo)
para executar um teste individualmente no pytest o comando e pytest -k 'nome_do_teste', no unittest basta adicionar -k na frente. Para utilizar o pytest watch, o comando e ptw -- -k 'nomedoteste'
quando eu crio uma variavel e atribuo a ela a criacao de um model sem chamar o gerenciador objects, essa variavel nao tera um id e nao sera salva nos meus models, para que seja criada e salva, comos se tivesse sendo feito o save(), devo executar, por exemplo, o seguinte comando category = Category.objects.create(name='category')
os ... para ignorar a execucao de uma funcao ou classe chama elipses, tambem pode ser usado o pass
fixture eh um trecho de codigo que e digitado para dar suporte ao teste realizado.
code smelling significa que o codigo nao esta usando as melhores praticas
metodos teardown seriam meotodos a serem executados apos o teste ja os metodos setup sao metodos de configuracao, o metodo setup e executado antes de cada execaucao de teste
para pular um teste caso seja a estrategia, basta usar o @skip importando o modulo direto do unittest,ex: from unittest import skip, e acima da calsse a ser skipada, colocar o comando @skip('a mensagem a ser exibida'), o skip podera ser utilizado tanto na classe como no metodo
quando quisermos falhar um teste porposital, basta utilizar self.fail('mensagem a ser exibida')
WIP = WORK IN PROGRESS  




arquivo-settings
"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0p!&$&b7wiu$ipfjl!wb162!cyi-f%)e+bwwyk)+qyhba1de%2" # noqa E501

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "recipes",  # nome do app, dentro de apps
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "base_templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator", # noqa E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", # noqa E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", # noqa E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", # noqa E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "pt-BR"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "base_static",
]

STATIC_ROOT = BASE_DIR / "static"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
